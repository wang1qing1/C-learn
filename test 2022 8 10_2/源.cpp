#define _CRT_SECURE_NO_WARNINGS 1
//int main()
//{
//	int a = 10;
//	//二进制
//	00000000000000000000000000001010;  "源码", "反码","补码";
//	"首位 0 ，代表二进制数，是个正数";
//	int b = -10;
//	"二进制";"首位 1 ，代表二进制数是负数"
//	10000000000000000000000000001010;  "源码"
//	11111111111111111111111111110101;  "反码"
//	11111111111111111111111111110110;  "补码"
//
//
//
//	return 0;
//}
//#include<stdio.h>
//int main()
//{
//
//	int a = 0x00000001;
//	//将数据地址强转为（char*），意味着当解引用访问时，
//	//因为char只有一个字节，所以char*解引用访问时，只会
//	//访问a的空间的一个字节。
//	char* ch = (char*) & a;
//	if (*ch == 1)
//	{
//		printf("小端存储\n");
//	}
//	else
//	{
//		printf("大端存储\n");
//	}
//	return 0;
//}

#include <stdio.h>
//int main()
//{
//	char a = -1;
//	signed char b = -1;
//	unsigned char c = -1;
//	printf("a=%d,b=%d,c=%d", a, b, c);
//	return 0;
//}
//int main()
//{
//	char a = 4;
////  00000100  补码
////  00000000000000000000000000000100   整形提升后
//	char b = -1;
////  11111111  补码
////  11111111111111111111111111111111   整形提升后
//	char c = a + b;
////	00000000000000000000000000000100 -  4    补码
////  11111111111111111111111111111111 -  -1   补码
//// 100000000000000000000000000000011 -  3    最高位符号位为0，正数源，反，补码相同
////  00000011  ---c    因为 c 是 char类型，所以只需要发生截断。
////  %d 是打印有符号整形 仍需要整形提升后打印。
//	printf("%d ", c);
//	return 0;
//}

//int main()
//{
//	char a = 0xb6;
//	//10110110  - a  补码
//	//111111111111111111111111 10110110   整形提升过后的补码
//	//111111111111111111111111 10110101   反码
//	//100000000000000000000000 01001010   源码  = -74
//	short b = 0xb600;
//	int c = 0xb6000000;
//	if (a == 0xb6)
//		printf("a");
//	if (b == 0xb600)
//		printf("b");
//	if (c == 0xb6000000)
//		printf("c");
//	return 0;
//}

//int main()
//{
//	char c = 1;
//	printf("%u\n", sizeof(c));
//	printf("%u\n", sizeof(+c));
//	printf("%u\n", sizeof(-c));
//	return 0;
//}

//int main()
//{
//	int n = 9;  //整形存入 9 整形变量 n.
//	float* pFloat = (float*)&n;   
//	printf("n的值为：%d\n", n);  //整形访问 n
//	printf("*pFloat的值为：%f\n", *pFloat);  //浮点型访问 n
//	*pFloat = 9.0;  //将 浮点数9.0 存入 n 的内存空间 
//	printf("num的值为：%d\n", n);   // 整形访问空间
//	printf("*pFloat的值为：%f\n", *pFloat); //浮点型访问空间
//	return 0;
//}
//int main()
//{
//	float a=10.75f;
//	//二进制
//	//1010.11
//	//1.01011 * 2^3
//	//所以 S = 0，E = 3+127，M =1.01011
//	//二进制存储方式：0 10000010 01011000000000000000000
//	//0100 0001 0010 1100 0000 0000 0000 0000
//    // 4    1   2     c    0    0   0     0
//	//  41  2c   00   00
//	//小端存储：00 00 2c 41
//
//
//	return 0;
//}
int main()
{
	int n = 9;
	// n 整形存储的内存补码：
	//00000000 00000000 00000000 00001001
	float* pFloat = (float*)&n;
	printf("n的值为：%d\n", n);
	//以浮点数的形式访问：
	//0 00000000 00000000000000000001001
	//因为 E 全为0 实际为 1-127  ，
	//*pFloat=0.00000000000000000001001 * 2^(-126) 无限接近0
	printf("*pFloat的值为：%f\n", *pFloat);
	*pFloat = 9.0;
	//n 浮点型存储的：
	//9=1001=1.001 * 2^3  , S=1 , M=1.001 , E=3+127 
	//二进制为：0 10000010 00100000000000000000000
	//以十进制整形访问：
	//01000001000100000000000000000000 补码，反码，源码相同
	//01000001000100000000000000000000=1091567616
	printf("num的值为：%d\n", n);
	printf("*pFloat的值为：%f\n", *pFloat);
	return 0;
}